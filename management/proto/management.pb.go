// Code generated by protoc-gen-go. DO NOT EDIT.
// source: management.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HostConfig_Protocol int32

const (
	HostConfig_UDP   HostConfig_Protocol = 0
	HostConfig_TCP   HostConfig_Protocol = 1
	HostConfig_HTTP  HostConfig_Protocol = 2
	HostConfig_HTTPS HostConfig_Protocol = 3
	HostConfig_DTLS  HostConfig_Protocol = 4
)

var HostConfig_Protocol_name = map[int32]string{
	0: "UDP",
	1: "TCP",
	2: "HTTP",
	3: "HTTPS",
	4: "DTLS",
}

var HostConfig_Protocol_value = map[string]int32{
	"UDP":   0,
	"TCP":   1,
	"HTTP":  2,
	"HTTPS": 3,
	"DTLS":  4,
}

func (x HostConfig_Protocol) String() string {
	return proto.EnumName(HostConfig_Protocol_name, int32(x))
}

func (HostConfig_Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{10, 0}
}

type DeviceAuthorizationFlowProvider int32

const (
	DeviceAuthorizationFlow_HOSTED DeviceAuthorizationFlowProvider = 0
)

var DeviceAuthorizationFlowProvider_name = map[int32]string{
	0: "HOSTED",
}

var DeviceAuthorizationFlowProvider_value = map[string]int32{
	"HOSTED": 0,
}

func (x DeviceAuthorizationFlowProvider) String() string {
	return proto.EnumName(DeviceAuthorizationFlowProvider_name, int32(x))
}

func (DeviceAuthorizationFlowProvider) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{17, 0}
}

type FirewallRuleDirection int32

const (
	FirewallRule_IN  FirewallRuleDirection = 0
	FirewallRule_OUT FirewallRuleDirection = 1
)

var FirewallRuleDirection_name = map[int32]string{
	0: "IN",
	1: "OUT",
}

var FirewallRuleDirection_value = map[string]int32{
	"IN":  0,
	"OUT": 1,
}

func (x FirewallRuleDirection) String() string {
	return proto.EnumName(FirewallRuleDirection_name, int32(x))
}

func (FirewallRuleDirection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{25, 0}
}

type FirewallRuleAction int32

const (
	FirewallRule_ACCEPT FirewallRuleAction = 0
	FirewallRule_DROP   FirewallRuleAction = 1
)

var FirewallRuleAction_name = map[int32]string{
	0: "ACCEPT",
	1: "DROP",
}

var FirewallRuleAction_value = map[string]int32{
	"ACCEPT": 0,
	"DROP":   1,
}

func (x FirewallRuleAction) String() string {
	return proto.EnumName(FirewallRuleAction_name, int32(x))
}

func (FirewallRuleAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{25, 1}
}

type FirewallRuleProtocol int32

const (
	FirewallRule_UNKNOWN FirewallRuleProtocol = 0
	FirewallRule_ALL     FirewallRuleProtocol = 1
	FirewallRule_TCP     FirewallRuleProtocol = 2
	FirewallRule_UDP     FirewallRuleProtocol = 3
	FirewallRule_ICMP    FirewallRuleProtocol = 4
)

var FirewallRuleProtocol_name = map[int32]string{
	0: "UNKNOWN",
	1: "ALL",
	2: "TCP",
	3: "UDP",
	4: "ICMP",
}

var FirewallRuleProtocol_value = map[string]int32{
	"UNKNOWN": 0,
	"ALL":     1,
	"TCP":     2,
	"UDP":     3,
	"ICMP":    4,
}

func (x FirewallRuleProtocol) String() string {
	return proto.EnumName(FirewallRuleProtocol_name, int32(x))
}

func (FirewallRuleProtocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{25, 2}
}

type EncryptedMessage struct {
	// Wireguard public key
	WgPubKey string `protobuf:"bytes,1,opt,name=wgPubKey,proto3" json:"wgPubKey,omitempty"`
	// encrypted message Body
	Body []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	// Version of the Wiretrustee Management Service protocol
	Version              int32    `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EncryptedMessage) Reset()         { *m = EncryptedMessage{} }
func (m *EncryptedMessage) String() string { return proto.CompactTextString(m) }
func (*EncryptedMessage) ProtoMessage()    {}
func (*EncryptedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{0}
}

func (m *EncryptedMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EncryptedMessage.Unmarshal(m, b)
}
func (m *EncryptedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EncryptedMessage.Marshal(b, m, deterministic)
}
func (m *EncryptedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptedMessage.Merge(m, src)
}
func (m *EncryptedMessage) XXX_Size() int {
	return xxx_messageInfo_EncryptedMessage.Size(m)
}
func (m *EncryptedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptedMessage proto.InternalMessageInfo

func (m *EncryptedMessage) GetWgPubKey() string {
	if m != nil {
		return m.WgPubKey
	}
	return ""
}

func (m *EncryptedMessage) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *EncryptedMessage) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type SyncRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncRequest) Reset()         { *m = SyncRequest{} }
func (m *SyncRequest) String() string { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()    {}
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{1}
}

func (m *SyncRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncRequest.Unmarshal(m, b)
}
func (m *SyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncRequest.Marshal(b, m, deterministic)
}
func (m *SyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRequest.Merge(m, src)
}
func (m *SyncRequest) XXX_Size() int {
	return xxx_messageInfo_SyncRequest.Size(m)
}
func (m *SyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRequest proto.InternalMessageInfo

// SyncResponse represents a state that should be applied to the local peer (e.g. Wiretrustee servers config as well as local peer and remote peers configs)
type SyncResponse struct {
	// Global config
	WiretrusteeConfig *WiretrusteeConfig `protobuf:"bytes,1,opt,name=wiretrusteeConfig,proto3" json:"wiretrusteeConfig,omitempty"`
	// Deprecated. Use NetworkMap.PeerConfig
	PeerConfig *PeerConfig `protobuf:"bytes,2,opt,name=peerConfig,proto3" json:"peerConfig,omitempty"`
	// Deprecated. Use NetworkMap.RemotePeerConfig
	RemotePeers []*RemotePeerConfig `protobuf:"bytes,3,rep,name=remotePeers,proto3" json:"remotePeers,omitempty"`
	// Indicates whether remotePeers array is empty or not to bypass protobuf null and empty array equality.
	// Deprecated. Use NetworkMap.remotePeersIsEmpty
	RemotePeersIsEmpty   bool        `protobuf:"varint,4,opt,name=remotePeersIsEmpty,proto3" json:"remotePeersIsEmpty,omitempty"`
	NetworkMap           *NetworkMap `protobuf:"bytes,5,opt,name=NetworkMap,proto3" json:"NetworkMap,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SyncResponse) Reset()         { *m = SyncResponse{} }
func (m *SyncResponse) String() string { return proto.CompactTextString(m) }
func (*SyncResponse) ProtoMessage()    {}
func (*SyncResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{2}
}

func (m *SyncResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncResponse.Unmarshal(m, b)
}
func (m *SyncResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncResponse.Marshal(b, m, deterministic)
}
func (m *SyncResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncResponse.Merge(m, src)
}
func (m *SyncResponse) XXX_Size() int {
	return xxx_messageInfo_SyncResponse.Size(m)
}
func (m *SyncResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncResponse proto.InternalMessageInfo

func (m *SyncResponse) GetWiretrusteeConfig() *WiretrusteeConfig {
	if m != nil {
		return m.WiretrusteeConfig
	}
	return nil
}

func (m *SyncResponse) GetPeerConfig() *PeerConfig {
	if m != nil {
		return m.PeerConfig
	}
	return nil
}

func (m *SyncResponse) GetRemotePeers() []*RemotePeerConfig {
	if m != nil {
		return m.RemotePeers
	}
	return nil
}

func (m *SyncResponse) GetRemotePeersIsEmpty() bool {
	if m != nil {
		return m.RemotePeersIsEmpty
	}
	return false
}

func (m *SyncResponse) GetNetworkMap() *NetworkMap {
	if m != nil {
		return m.NetworkMap
	}
	return nil
}

type LoginRequest struct {
	// Pre-authorized setup key (can be empty)
	SetupKey string `protobuf:"bytes,1,opt,name=setupKey,proto3" json:"setupKey,omitempty"`
	// Meta data of the peer (e.g. name, os_name, os_version,
	Meta *PeerSystemMeta `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// SSO token (can be empty)
	JwtToken string `protobuf:"bytes,3,opt,name=jwtToken,proto3" json:"jwtToken,omitempty"`
	// Can be absent for now.
	PeerKeys             *PeerKeys `protobuf:"bytes,4,opt,name=peerKeys,proto3" json:"peerKeys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *LoginRequest) Reset()         { *m = LoginRequest{} }
func (m *LoginRequest) String() string { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()    {}
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{3}
}

func (m *LoginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginRequest.Unmarshal(m, b)
}
func (m *LoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginRequest.Marshal(b, m, deterministic)
}
func (m *LoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRequest.Merge(m, src)
}
func (m *LoginRequest) XXX_Size() int {
	return xxx_messageInfo_LoginRequest.Size(m)
}
func (m *LoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRequest proto.InternalMessageInfo

func (m *LoginRequest) GetSetupKey() string {
	if m != nil {
		return m.SetupKey
	}
	return ""
}

func (m *LoginRequest) GetMeta() *PeerSystemMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *LoginRequest) GetJwtToken() string {
	if m != nil {
		return m.JwtToken
	}
	return ""
}

func (m *LoginRequest) GetPeerKeys() *PeerKeys {
	if m != nil {
		return m.PeerKeys
	}
	return nil
}

// PeerKeys is additional peer info like SSH pub key and WireGuard public key.
// This message is sent on Login or register requests, or when a key rotation has to happen.
type PeerKeys struct {
	// sshPubKey represents a public SSH key of the peer. Can be absent.
	SshPubKey []byte `protobuf:"bytes,1,opt,name=sshPubKey,proto3" json:"sshPubKey,omitempty"`
	// wgPubKey represents a public WireGuard key of the peer. Can be absent.
	WgPubKey             []byte   `protobuf:"bytes,2,opt,name=wgPubKey,proto3" json:"wgPubKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerKeys) Reset()         { *m = PeerKeys{} }
func (m *PeerKeys) String() string { return proto.CompactTextString(m) }
func (*PeerKeys) ProtoMessage()    {}
func (*PeerKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{4}
}

func (m *PeerKeys) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerKeys.Unmarshal(m, b)
}
func (m *PeerKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerKeys.Marshal(b, m, deterministic)
}
func (m *PeerKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerKeys.Merge(m, src)
}
func (m *PeerKeys) XXX_Size() int {
	return xxx_messageInfo_PeerKeys.Size(m)
}
func (m *PeerKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerKeys.DiscardUnknown(m)
}

var xxx_messageInfo_PeerKeys proto.InternalMessageInfo

func (m *PeerKeys) GetSshPubKey() []byte {
	if m != nil {
		return m.SshPubKey
	}
	return nil
}

func (m *PeerKeys) GetWgPubKey() []byte {
	if m != nil {
		return m.WgPubKey
	}
	return nil
}

// PeerSystemMeta is machine meta data like OS and version.
type PeerSystemMeta struct {
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	GoOS                 string   `protobuf:"bytes,2,opt,name=goOS,proto3" json:"goOS,omitempty"`
	Kernel               string   `protobuf:"bytes,3,opt,name=kernel,proto3" json:"kernel,omitempty"`
	Core                 string   `protobuf:"bytes,4,opt,name=core,proto3" json:"core,omitempty"`
	Platform             string   `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	OS                   string   `protobuf:"bytes,6,opt,name=OS,proto3" json:"OS,omitempty"`
	WiretrusteeVersion   string   `protobuf:"bytes,7,opt,name=wiretrusteeVersion,proto3" json:"wiretrusteeVersion,omitempty"`
	UiVersion            string   `protobuf:"bytes,8,opt,name=uiVersion,proto3" json:"uiVersion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerSystemMeta) Reset()         { *m = PeerSystemMeta{} }
func (m *PeerSystemMeta) String() string { return proto.CompactTextString(m) }
func (*PeerSystemMeta) ProtoMessage()    {}
func (*PeerSystemMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{5}
}

func (m *PeerSystemMeta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerSystemMeta.Unmarshal(m, b)
}
func (m *PeerSystemMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerSystemMeta.Marshal(b, m, deterministic)
}
func (m *PeerSystemMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerSystemMeta.Merge(m, src)
}
func (m *PeerSystemMeta) XXX_Size() int {
	return xxx_messageInfo_PeerSystemMeta.Size(m)
}
func (m *PeerSystemMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerSystemMeta.DiscardUnknown(m)
}

var xxx_messageInfo_PeerSystemMeta proto.InternalMessageInfo

func (m *PeerSystemMeta) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *PeerSystemMeta) GetGoOS() string {
	if m != nil {
		return m.GoOS
	}
	return ""
}

func (m *PeerSystemMeta) GetKernel() string {
	if m != nil {
		return m.Kernel
	}
	return ""
}

func (m *PeerSystemMeta) GetCore() string {
	if m != nil {
		return m.Core
	}
	return ""
}

func (m *PeerSystemMeta) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *PeerSystemMeta) GetOS() string {
	if m != nil {
		return m.OS
	}
	return ""
}

func (m *PeerSystemMeta) GetWiretrusteeVersion() string {
	if m != nil {
		return m.WiretrusteeVersion
	}
	return ""
}

func (m *PeerSystemMeta) GetUiVersion() string {
	if m != nil {
		return m.UiVersion
	}
	return ""
}

type LoginResponse struct {
	// Global config
	WiretrusteeConfig *WiretrusteeConfig `protobuf:"bytes,1,opt,name=wiretrusteeConfig,proto3" json:"wiretrusteeConfig,omitempty"`
	// Peer local config
	PeerConfig           *PeerConfig `protobuf:"bytes,2,opt,name=peerConfig,proto3" json:"peerConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *LoginResponse) Reset()         { *m = LoginResponse{} }
func (m *LoginResponse) String() string { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()    {}
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{6}
}

func (m *LoginResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginResponse.Unmarshal(m, b)
}
func (m *LoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginResponse.Marshal(b, m, deterministic)
}
func (m *LoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResponse.Merge(m, src)
}
func (m *LoginResponse) XXX_Size() int {
	return xxx_messageInfo_LoginResponse.Size(m)
}
func (m *LoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResponse proto.InternalMessageInfo

func (m *LoginResponse) GetWiretrusteeConfig() *WiretrusteeConfig {
	if m != nil {
		return m.WiretrusteeConfig
	}
	return nil
}

func (m *LoginResponse) GetPeerConfig() *PeerConfig {
	if m != nil {
		return m.PeerConfig
	}
	return nil
}

type ServerKeyResponse struct {
	// Server's Wireguard public key
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Key expiration timestamp after which the key should be fetched again by the client
	ExpiresAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
	// Version of the Wiretrustee Management Service protocol
	Version              int32    `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerKeyResponse) Reset()         { *m = ServerKeyResponse{} }
func (m *ServerKeyResponse) String() string { return proto.CompactTextString(m) }
func (*ServerKeyResponse) ProtoMessage()    {}
func (*ServerKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{7}
}

func (m *ServerKeyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerKeyResponse.Unmarshal(m, b)
}
func (m *ServerKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerKeyResponse.Marshal(b, m, deterministic)
}
func (m *ServerKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerKeyResponse.Merge(m, src)
}
func (m *ServerKeyResponse) XXX_Size() int {
	return xxx_messageInfo_ServerKeyResponse.Size(m)
}
func (m *ServerKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServerKeyResponse proto.InternalMessageInfo

func (m *ServerKeyResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ServerKeyResponse) GetExpiresAt() *timestamp.Timestamp {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

func (m *ServerKeyResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{8}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

// WiretrusteeConfig is a common configuration of any Wiretrustee peer. It contains STUN, TURN, Signal and Management servers configurations
type WiretrusteeConfig struct {
	// a list of STUN servers
	Stuns []*HostConfig `protobuf:"bytes,1,rep,name=stuns,proto3" json:"stuns,omitempty"`
	// a list of TURN servers
	Turns []*ProtectedHostConfig `protobuf:"bytes,2,rep,name=turns,proto3" json:"turns,omitempty"`
	// a Signal server config
	Signal               *HostConfig `protobuf:"bytes,3,opt,name=signal,proto3" json:"signal,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *WiretrusteeConfig) Reset()         { *m = WiretrusteeConfig{} }
func (m *WiretrusteeConfig) String() string { return proto.CompactTextString(m) }
func (*WiretrusteeConfig) ProtoMessage()    {}
func (*WiretrusteeConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{9}
}

func (m *WiretrusteeConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WiretrusteeConfig.Unmarshal(m, b)
}
func (m *WiretrusteeConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WiretrusteeConfig.Marshal(b, m, deterministic)
}
func (m *WiretrusteeConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WiretrusteeConfig.Merge(m, src)
}
func (m *WiretrusteeConfig) XXX_Size() int {
	return xxx_messageInfo_WiretrusteeConfig.Size(m)
}
func (m *WiretrusteeConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WiretrusteeConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WiretrusteeConfig proto.InternalMessageInfo

func (m *WiretrusteeConfig) GetStuns() []*HostConfig {
	if m != nil {
		return m.Stuns
	}
	return nil
}

func (m *WiretrusteeConfig) GetTurns() []*ProtectedHostConfig {
	if m != nil {
		return m.Turns
	}
	return nil
}

func (m *WiretrusteeConfig) GetSignal() *HostConfig {
	if m != nil {
		return m.Signal
	}
	return nil
}

// HostConfig describes connection properties of some server (e.g. STUN, Signal, Management)
type HostConfig struct {
	// URI of the resource e.g. turns://stun.wiretrustee.com:4430 or signal.wiretrustee.com:10000
	Uri                  string              `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Protocol             HostConfig_Protocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=management.HostConfig_Protocol" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *HostConfig) Reset()         { *m = HostConfig{} }
func (m *HostConfig) String() string { return proto.CompactTextString(m) }
func (*HostConfig) ProtoMessage()    {}
func (*HostConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{10}
}

func (m *HostConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HostConfig.Unmarshal(m, b)
}
func (m *HostConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HostConfig.Marshal(b, m, deterministic)
}
func (m *HostConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostConfig.Merge(m, src)
}
func (m *HostConfig) XXX_Size() int {
	return xxx_messageInfo_HostConfig.Size(m)
}
func (m *HostConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_HostConfig.DiscardUnknown(m)
}

var xxx_messageInfo_HostConfig proto.InternalMessageInfo

func (m *HostConfig) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *HostConfig) GetProtocol() HostConfig_Protocol {
	if m != nil {
		return m.Protocol
	}
	return HostConfig_UDP
}

// ProtectedHostConfig is similar to HostConfig but has additional user and password
// Mostly used for TURN servers
type ProtectedHostConfig struct {
	HostConfig           *HostConfig `protobuf:"bytes,1,opt,name=hostConfig,proto3" json:"hostConfig,omitempty"`
	User                 string      `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Password             string      `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ProtectedHostConfig) Reset()         { *m = ProtectedHostConfig{} }
func (m *ProtectedHostConfig) String() string { return proto.CompactTextString(m) }
func (*ProtectedHostConfig) ProtoMessage()    {}
func (*ProtectedHostConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{11}
}

func (m *ProtectedHostConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProtectedHostConfig.Unmarshal(m, b)
}
func (m *ProtectedHostConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProtectedHostConfig.Marshal(b, m, deterministic)
}
func (m *ProtectedHostConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtectedHostConfig.Merge(m, src)
}
func (m *ProtectedHostConfig) XXX_Size() int {
	return xxx_messageInfo_ProtectedHostConfig.Size(m)
}
func (m *ProtectedHostConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtectedHostConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ProtectedHostConfig proto.InternalMessageInfo

func (m *ProtectedHostConfig) GetHostConfig() *HostConfig {
	if m != nil {
		return m.HostConfig
	}
	return nil
}

func (m *ProtectedHostConfig) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ProtectedHostConfig) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// PeerConfig represents a configuration of a "our" peer.
// The properties are used to configure local Wireguard
type PeerConfig struct {
	// Peer's virtual IP address within the Wiretrustee VPN (a Wireguard address config)
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Wiretrustee DNS server (a Wireguard DNS config)
	Dns string `protobuf:"bytes,2,opt,name=dns,proto3" json:"dns,omitempty"`
	// SSHConfig of the peer.
	SshConfig *SSHConfig `protobuf:"bytes,3,opt,name=sshConfig,proto3" json:"sshConfig,omitempty"`
	// Peer fully qualified domain name
	Fqdn                 string   `protobuf:"bytes,4,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerConfig) Reset()         { *m = PeerConfig{} }
func (m *PeerConfig) String() string { return proto.CompactTextString(m) }
func (*PeerConfig) ProtoMessage()    {}
func (*PeerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{12}
}

func (m *PeerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerConfig.Unmarshal(m, b)
}
func (m *PeerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerConfig.Marshal(b, m, deterministic)
}
func (m *PeerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerConfig.Merge(m, src)
}
func (m *PeerConfig) XXX_Size() int {
	return xxx_messageInfo_PeerConfig.Size(m)
}
func (m *PeerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PeerConfig proto.InternalMessageInfo

func (m *PeerConfig) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *PeerConfig) GetDns() string {
	if m != nil {
		return m.Dns
	}
	return ""
}

func (m *PeerConfig) GetSshConfig() *SSHConfig {
	if m != nil {
		return m.SshConfig
	}
	return nil
}

func (m *PeerConfig) GetFqdn() string {
	if m != nil {
		return m.Fqdn
	}
	return ""
}

// NetworkMap represents a network state of the peer with the corresponding configuration parameters to establish peer-to-peer connections
type NetworkMap struct {
	// Serial is an ID of the network state to be used by clients to order updates.
	// The larger the Serial the newer the configuration.
	// E.g. the client app should keep track of this id locally and discard all the configurations with a lower value
	Serial uint64 `protobuf:"varint,1,opt,name=Serial,proto3" json:"Serial,omitempty"`
	// PeerConfig represents configuration of a peer
	PeerConfig *PeerConfig `protobuf:"bytes,2,opt,name=peerConfig,proto3" json:"peerConfig,omitempty"`
	// RemotePeerConfig represents a list of remote peers that the receiver can connect to
	RemotePeers []*RemotePeerConfig `protobuf:"bytes,3,rep,name=remotePeers,proto3" json:"remotePeers,omitempty"`
	// Indicates whether remotePeers array is empty or not to bypass protobuf null and empty array equality.
	RemotePeersIsEmpty bool `protobuf:"varint,4,opt,name=remotePeersIsEmpty,proto3" json:"remotePeersIsEmpty,omitempty"`
	// List of routes to be applied
	Routes []*Route `protobuf:"bytes,5,rep,name=Routes,proto3" json:"Routes,omitempty"`
	// DNS config to be applied
	DNSConfig *DNSConfig `protobuf:"bytes,6,opt,name=DNSConfig,proto3" json:"DNSConfig,omitempty"`
	// RemotePeerConfig represents a list of remote peers that the receiver can connect to
	OfflinePeers []*RemotePeerConfig `protobuf:"bytes,7,rep,name=offlinePeers,proto3" json:"offlinePeers,omitempty"`
	// FirewallRule represents a list of firewall rules to be applied to peer
	FirewallRules []*FirewallRule `protobuf:"bytes,8,rep,name=FirewallRules,proto3" json:"FirewallRules,omitempty"`
	// firewallRulesIsEmpty indicates whether FirewallRule array is empty or not to bypass protobuf null and empty array equality.
	FirewallRulesIsEmpty bool     `protobuf:"varint,9,opt,name=firewallRulesIsEmpty,proto3" json:"firewallRulesIsEmpty,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkMap) Reset()         { *m = NetworkMap{} }
func (m *NetworkMap) String() string { return proto.CompactTextString(m) }
func (*NetworkMap) ProtoMessage()    {}
func (*NetworkMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{13}
}

func (m *NetworkMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkMap.Unmarshal(m, b)
}
func (m *NetworkMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkMap.Marshal(b, m, deterministic)
}
func (m *NetworkMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkMap.Merge(m, src)
}
func (m *NetworkMap) XXX_Size() int {
	return xxx_messageInfo_NetworkMap.Size(m)
}
func (m *NetworkMap) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkMap.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkMap proto.InternalMessageInfo

func (m *NetworkMap) GetSerial() uint64 {
	if m != nil {
		return m.Serial
	}
	return 0
}

func (m *NetworkMap) GetPeerConfig() *PeerConfig {
	if m != nil {
		return m.PeerConfig
	}
	return nil
}

func (m *NetworkMap) GetRemotePeers() []*RemotePeerConfig {
	if m != nil {
		return m.RemotePeers
	}
	return nil
}

func (m *NetworkMap) GetRemotePeersIsEmpty() bool {
	if m != nil {
		return m.RemotePeersIsEmpty
	}
	return false
}

func (m *NetworkMap) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *NetworkMap) GetDNSConfig() *DNSConfig {
	if m != nil {
		return m.DNSConfig
	}
	return nil
}

func (m *NetworkMap) GetOfflinePeers() []*RemotePeerConfig {
	if m != nil {
		return m.OfflinePeers
	}
	return nil
}

func (m *NetworkMap) GetFirewallRules() []*FirewallRule {
	if m != nil {
		return m.FirewallRules
	}
	return nil
}

func (m *NetworkMap) GetFirewallRulesIsEmpty() bool {
	if m != nil {
		return m.FirewallRulesIsEmpty
	}
	return false
}

// RemotePeerConfig represents a configuration of a remote peer.
// The properties are used to configure WireGuard Peers sections
type RemotePeerConfig struct {
	// A WireGuard public key of a remote peer
	WgPubKey string `protobuf:"bytes,1,opt,name=wgPubKey,proto3" json:"wgPubKey,omitempty"`
	// WireGuard allowed IPs of a remote peer e.g. [10.30.30.1/32]
	AllowedIps []string `protobuf:"bytes,2,rep,name=allowedIps,proto3" json:"allowedIps,omitempty"`
	// SSHConfig is a SSH config of the remote peer. SSHConfig.sshPubKey should be ignored because peer knows it's SSH key.
	SshConfig *SSHConfig `protobuf:"bytes,3,opt,name=sshConfig,proto3" json:"sshConfig,omitempty"`
	// Peer fully qualified domain name
	Fqdn                 string   `protobuf:"bytes,4,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemotePeerConfig) Reset()         { *m = RemotePeerConfig{} }
func (m *RemotePeerConfig) String() string { return proto.CompactTextString(m) }
func (*RemotePeerConfig) ProtoMessage()    {}
func (*RemotePeerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{14}
}

func (m *RemotePeerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemotePeerConfig.Unmarshal(m, b)
}
func (m *RemotePeerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemotePeerConfig.Marshal(b, m, deterministic)
}
func (m *RemotePeerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemotePeerConfig.Merge(m, src)
}
func (m *RemotePeerConfig) XXX_Size() int {
	return xxx_messageInfo_RemotePeerConfig.Size(m)
}
func (m *RemotePeerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RemotePeerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RemotePeerConfig proto.InternalMessageInfo

func (m *RemotePeerConfig) GetWgPubKey() string {
	if m != nil {
		return m.WgPubKey
	}
	return ""
}

func (m *RemotePeerConfig) GetAllowedIps() []string {
	if m != nil {
		return m.AllowedIps
	}
	return nil
}

func (m *RemotePeerConfig) GetSshConfig() *SSHConfig {
	if m != nil {
		return m.SshConfig
	}
	return nil
}

func (m *RemotePeerConfig) GetFqdn() string {
	if m != nil {
		return m.Fqdn
	}
	return ""
}

// SSHConfig represents SSH configurations of a peer.
type SSHConfig struct {
	// sshEnabled indicates whether a SSH server is enabled on this peer
	SshEnabled bool `protobuf:"varint,1,opt,name=sshEnabled,proto3" json:"sshEnabled,omitempty"`
	// sshPubKey is a SSH public key of a peer to be added to authorized_hosts.
	// This property should be ignore if SSHConfig comes from PeerConfig.
	SshPubKey            []byte   `protobuf:"bytes,2,opt,name=sshPubKey,proto3" json:"sshPubKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSHConfig) Reset()         { *m = SSHConfig{} }
func (m *SSHConfig) String() string { return proto.CompactTextString(m) }
func (*SSHConfig) ProtoMessage()    {}
func (*SSHConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{15}
}

func (m *SSHConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSHConfig.Unmarshal(m, b)
}
func (m *SSHConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSHConfig.Marshal(b, m, deterministic)
}
func (m *SSHConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSHConfig.Merge(m, src)
}
func (m *SSHConfig) XXX_Size() int {
	return xxx_messageInfo_SSHConfig.Size(m)
}
func (m *SSHConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SSHConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SSHConfig proto.InternalMessageInfo

func (m *SSHConfig) GetSshEnabled() bool {
	if m != nil {
		return m.SshEnabled
	}
	return false
}

func (m *SSHConfig) GetSshPubKey() []byte {
	if m != nil {
		return m.SshPubKey
	}
	return nil
}

// DeviceAuthorizationFlowRequest empty struct for future expansion
type DeviceAuthorizationFlowRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceAuthorizationFlowRequest) Reset()         { *m = DeviceAuthorizationFlowRequest{} }
func (m *DeviceAuthorizationFlowRequest) String() string { return proto.CompactTextString(m) }
func (*DeviceAuthorizationFlowRequest) ProtoMessage()    {}
func (*DeviceAuthorizationFlowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{16}
}

func (m *DeviceAuthorizationFlowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceAuthorizationFlowRequest.Unmarshal(m, b)
}
func (m *DeviceAuthorizationFlowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceAuthorizationFlowRequest.Marshal(b, m, deterministic)
}
func (m *DeviceAuthorizationFlowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceAuthorizationFlowRequest.Merge(m, src)
}
func (m *DeviceAuthorizationFlowRequest) XXX_Size() int {
	return xxx_messageInfo_DeviceAuthorizationFlowRequest.Size(m)
}
func (m *DeviceAuthorizationFlowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceAuthorizationFlowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceAuthorizationFlowRequest proto.InternalMessageInfo

// DeviceAuthorizationFlow represents Device Authorization Flow information
// that can be used by the client to login initiate a Oauth 2.0 device authorization grant flow
// see https://datatracker.ietf.org/doc/html/rfc8628
type DeviceAuthorizationFlow struct {
	// An IDP provider , (eg. Auth0)
	Provider             DeviceAuthorizationFlowProvider `protobuf:"varint,1,opt,name=Provider,proto3,enum=management.DeviceAuthorizationFlowProvider" json:"Provider,omitempty"`
	ProviderConfig       *ProviderConfig                 `protobuf:"bytes,2,opt,name=ProviderConfig,proto3" json:"ProviderConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *DeviceAuthorizationFlow) Reset()         { *m = DeviceAuthorizationFlow{} }
func (m *DeviceAuthorizationFlow) String() string { return proto.CompactTextString(m) }
func (*DeviceAuthorizationFlow) ProtoMessage()    {}
func (*DeviceAuthorizationFlow) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{17}
}

func (m *DeviceAuthorizationFlow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceAuthorizationFlow.Unmarshal(m, b)
}
func (m *DeviceAuthorizationFlow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceAuthorizationFlow.Marshal(b, m, deterministic)
}
func (m *DeviceAuthorizationFlow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceAuthorizationFlow.Merge(m, src)
}
func (m *DeviceAuthorizationFlow) XXX_Size() int {
	return xxx_messageInfo_DeviceAuthorizationFlow.Size(m)
}
func (m *DeviceAuthorizationFlow) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceAuthorizationFlow.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceAuthorizationFlow proto.InternalMessageInfo

func (m *DeviceAuthorizationFlow) GetProvider() DeviceAuthorizationFlowProvider {
	if m != nil {
		return m.Provider
	}
	return DeviceAuthorizationFlow_HOSTED
}

func (m *DeviceAuthorizationFlow) GetProviderConfig() *ProviderConfig {
	if m != nil {
		return m.ProviderConfig
	}
	return nil
}

// ProviderConfig has all attributes needed to initiate a device authorization flow
type ProviderConfig struct {
	// An IDP application client id
	ClientID string `protobuf:"bytes,1,opt,name=ClientID,proto3" json:"ClientID,omitempty"`
	// An IDP application client secret
	ClientSecret string `protobuf:"bytes,2,opt,name=ClientSecret,proto3" json:"ClientSecret,omitempty"`
	// An IDP API domain
	// Deprecated. Use a DeviceAuthEndpoint and TokenEndpoint
	Domain string `protobuf:"bytes,3,opt,name=Domain,proto3" json:"Domain,omitempty"`
	// An Audience for validation
	Audience string `protobuf:"bytes,4,opt,name=Audience,proto3" json:"Audience,omitempty"`
	// DeviceAuthEndpoint is an endpoint to request device authentication code.
	DeviceAuthEndpoint string `protobuf:"bytes,5,opt,name=DeviceAuthEndpoint,proto3" json:"DeviceAuthEndpoint,omitempty"`
	// TokenEndpoint is an endpoint to request auth token.
	TokenEndpoint string `protobuf:"bytes,6,opt,name=TokenEndpoint,proto3" json:"TokenEndpoint,omitempty"`
	// Scopes provides the scopes to be included in the token request
	Scope string `protobuf:"bytes,7,opt,name=Scope,proto3" json:"Scope,omitempty"`
	// UseIDToken indicates if the id token should be used for authentication
	UseIDToken           bool     `protobuf:"varint,8,opt,name=UseIDToken,proto3" json:"UseIDToken,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProviderConfig) Reset()         { *m = ProviderConfig{} }
func (m *ProviderConfig) String() string { return proto.CompactTextString(m) }
func (*ProviderConfig) ProtoMessage()    {}
func (*ProviderConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{18}
}

func (m *ProviderConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProviderConfig.Unmarshal(m, b)
}
func (m *ProviderConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProviderConfig.Marshal(b, m, deterministic)
}
func (m *ProviderConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProviderConfig.Merge(m, src)
}
func (m *ProviderConfig) XXX_Size() int {
	return xxx_messageInfo_ProviderConfig.Size(m)
}
func (m *ProviderConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ProviderConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ProviderConfig proto.InternalMessageInfo

func (m *ProviderConfig) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *ProviderConfig) GetClientSecret() string {
	if m != nil {
		return m.ClientSecret
	}
	return ""
}

func (m *ProviderConfig) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ProviderConfig) GetAudience() string {
	if m != nil {
		return m.Audience
	}
	return ""
}

func (m *ProviderConfig) GetDeviceAuthEndpoint() string {
	if m != nil {
		return m.DeviceAuthEndpoint
	}
	return ""
}

func (m *ProviderConfig) GetTokenEndpoint() string {
	if m != nil {
		return m.TokenEndpoint
	}
	return ""
}

func (m *ProviderConfig) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *ProviderConfig) GetUseIDToken() bool {
	if m != nil {
		return m.UseIDToken
	}
	return false
}

// Route represents a route.Route object
type Route struct {
	ID                   string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Network              string   `protobuf:"bytes,2,opt,name=Network,proto3" json:"Network,omitempty"`
	NetworkType          int64    `protobuf:"varint,3,opt,name=NetworkType,proto3" json:"NetworkType,omitempty"`
	Peer                 string   `protobuf:"bytes,4,opt,name=Peer,proto3" json:"Peer,omitempty"`
	Metric               int64    `protobuf:"varint,5,opt,name=Metric,proto3" json:"Metric,omitempty"`
	Masquerade           bool     `protobuf:"varint,6,opt,name=Masquerade,proto3" json:"Masquerade,omitempty"`
	NetID                string   `protobuf:"bytes,7,opt,name=NetID,proto3" json:"NetID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{19}
}

func (m *Route) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route.Unmarshal(m, b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route.Marshal(b, m, deterministic)
}
func (m *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(m, src)
}
func (m *Route) XXX_Size() int {
	return xxx_messageInfo_Route.Size(m)
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

func (m *Route) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Route) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *Route) GetNetworkType() int64 {
	if m != nil {
		return m.NetworkType
	}
	return 0
}

func (m *Route) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

func (m *Route) GetMetric() int64 {
	if m != nil {
		return m.Metric
	}
	return 0
}

func (m *Route) GetMasquerade() bool {
	if m != nil {
		return m.Masquerade
	}
	return false
}

func (m *Route) GetNetID() string {
	if m != nil {
		return m.NetID
	}
	return ""
}

// DNSConfig represents a dns.Update
type DNSConfig struct {
	ServiceEnable        bool               `protobuf:"varint,1,opt,name=ServiceEnable,proto3" json:"ServiceEnable,omitempty"`
	NameServerGroups     []*NameServerGroup `protobuf:"bytes,2,rep,name=NameServerGroups,proto3" json:"NameServerGroups,omitempty"`
	CustomZones          []*CustomZone      `protobuf:"bytes,3,rep,name=CustomZones,proto3" json:"CustomZones,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DNSConfig) Reset()         { *m = DNSConfig{} }
func (m *DNSConfig) String() string { return proto.CompactTextString(m) }
func (*DNSConfig) ProtoMessage()    {}
func (*DNSConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{20}
}

func (m *DNSConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DNSConfig.Unmarshal(m, b)
}
func (m *DNSConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DNSConfig.Marshal(b, m, deterministic)
}
func (m *DNSConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DNSConfig.Merge(m, src)
}
func (m *DNSConfig) XXX_Size() int {
	return xxx_messageInfo_DNSConfig.Size(m)
}
func (m *DNSConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DNSConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DNSConfig proto.InternalMessageInfo

func (m *DNSConfig) GetServiceEnable() bool {
	if m != nil {
		return m.ServiceEnable
	}
	return false
}

func (m *DNSConfig) GetNameServerGroups() []*NameServerGroup {
	if m != nil {
		return m.NameServerGroups
	}
	return nil
}

func (m *DNSConfig) GetCustomZones() []*CustomZone {
	if m != nil {
		return m.CustomZones
	}
	return nil
}

// CustomZone represents a dns.CustomZone
type CustomZone struct {
	Domain               string          `protobuf:"bytes,1,opt,name=Domain,proto3" json:"Domain,omitempty"`
	Records              []*SimpleRecord `protobuf:"bytes,2,rep,name=Records,proto3" json:"Records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CustomZone) Reset()         { *m = CustomZone{} }
func (m *CustomZone) String() string { return proto.CompactTextString(m) }
func (*CustomZone) ProtoMessage()    {}
func (*CustomZone) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{21}
}

func (m *CustomZone) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomZone.Unmarshal(m, b)
}
func (m *CustomZone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomZone.Marshal(b, m, deterministic)
}
func (m *CustomZone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomZone.Merge(m, src)
}
func (m *CustomZone) XXX_Size() int {
	return xxx_messageInfo_CustomZone.Size(m)
}
func (m *CustomZone) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomZone.DiscardUnknown(m)
}

var xxx_messageInfo_CustomZone proto.InternalMessageInfo

func (m *CustomZone) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *CustomZone) GetRecords() []*SimpleRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

// SimpleRecord represents a dns.SimpleRecord
type SimpleRecord struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Type                 int64    `protobuf:"varint,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Class                string   `protobuf:"bytes,3,opt,name=Class,proto3" json:"Class,omitempty"`
	TTL                  int64    `protobuf:"varint,4,opt,name=TTL,proto3" json:"TTL,omitempty"`
	RData                string   `protobuf:"bytes,5,opt,name=RData,proto3" json:"RData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleRecord) Reset()         { *m = SimpleRecord{} }
func (m *SimpleRecord) String() string { return proto.CompactTextString(m) }
func (*SimpleRecord) ProtoMessage()    {}
func (*SimpleRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{22}
}

func (m *SimpleRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleRecord.Unmarshal(m, b)
}
func (m *SimpleRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleRecord.Marshal(b, m, deterministic)
}
func (m *SimpleRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleRecord.Merge(m, src)
}
func (m *SimpleRecord) XXX_Size() int {
	return xxx_messageInfo_SimpleRecord.Size(m)
}
func (m *SimpleRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleRecord proto.InternalMessageInfo

func (m *SimpleRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SimpleRecord) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *SimpleRecord) GetClass() string {
	if m != nil {
		return m.Class
	}
	return ""
}

func (m *SimpleRecord) GetTTL() int64 {
	if m != nil {
		return m.TTL
	}
	return 0
}

func (m *SimpleRecord) GetRData() string {
	if m != nil {
		return m.RData
	}
	return ""
}

// NameServerGroup represents a dns.NameServerGroup
type NameServerGroup struct {
	NameServers          []*NameServer `protobuf:"bytes,1,rep,name=NameServers,proto3" json:"NameServers,omitempty"`
	Primary              bool          `protobuf:"varint,2,opt,name=Primary,proto3" json:"Primary,omitempty"`
	Domains              []string      `protobuf:"bytes,3,rep,name=Domains,proto3" json:"Domains,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *NameServerGroup) Reset()         { *m = NameServerGroup{} }
func (m *NameServerGroup) String() string { return proto.CompactTextString(m) }
func (*NameServerGroup) ProtoMessage()    {}
func (*NameServerGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{23}
}

func (m *NameServerGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NameServerGroup.Unmarshal(m, b)
}
func (m *NameServerGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NameServerGroup.Marshal(b, m, deterministic)
}
func (m *NameServerGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameServerGroup.Merge(m, src)
}
func (m *NameServerGroup) XXX_Size() int {
	return xxx_messageInfo_NameServerGroup.Size(m)
}
func (m *NameServerGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_NameServerGroup.DiscardUnknown(m)
}

var xxx_messageInfo_NameServerGroup proto.InternalMessageInfo

func (m *NameServerGroup) GetNameServers() []*NameServer {
	if m != nil {
		return m.NameServers
	}
	return nil
}

func (m *NameServerGroup) GetPrimary() bool {
	if m != nil {
		return m.Primary
	}
	return false
}

func (m *NameServerGroup) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

// NameServer represents a dns.NameServer
type NameServer struct {
	IP                   string   `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	NSType               int64    `protobuf:"varint,2,opt,name=NSType,proto3" json:"NSType,omitempty"`
	Port                 int64    `protobuf:"varint,3,opt,name=Port,proto3" json:"Port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NameServer) Reset()         { *m = NameServer{} }
func (m *NameServer) String() string { return proto.CompactTextString(m) }
func (*NameServer) ProtoMessage()    {}
func (*NameServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{24}
}

func (m *NameServer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NameServer.Unmarshal(m, b)
}
func (m *NameServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NameServer.Marshal(b, m, deterministic)
}
func (m *NameServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameServer.Merge(m, src)
}
func (m *NameServer) XXX_Size() int {
	return xxx_messageInfo_NameServer.Size(m)
}
func (m *NameServer) XXX_DiscardUnknown() {
	xxx_messageInfo_NameServer.DiscardUnknown(m)
}

var xxx_messageInfo_NameServer proto.InternalMessageInfo

func (m *NameServer) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *NameServer) GetNSType() int64 {
	if m != nil {
		return m.NSType
	}
	return 0
}

func (m *NameServer) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

// FirewallRule represents a firewall rule
type FirewallRule struct {
	PeerIP               string                `protobuf:"bytes,1,opt,name=PeerIP,proto3" json:"PeerIP,omitempty"`
	Direction            FirewallRuleDirection `protobuf:"varint,2,opt,name=Direction,proto3,enum=management.FirewallRuleDirection" json:"Direction,omitempty"`
	Action               FirewallRuleAction    `protobuf:"varint,3,opt,name=Action,proto3,enum=management.FirewallRuleAction" json:"Action,omitempty"`
	Protocol             FirewallRuleProtocol  `protobuf:"varint,4,opt,name=Protocol,proto3,enum=management.FirewallRuleProtocol" json:"Protocol,omitempty"`
	Port                 string                `protobuf:"bytes,5,opt,name=Port,proto3" json:"Port,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *FirewallRule) Reset()         { *m = FirewallRule{} }
func (m *FirewallRule) String() string { return proto.CompactTextString(m) }
func (*FirewallRule) ProtoMessage()    {}
func (*FirewallRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{25}
}

func (m *FirewallRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirewallRule.Unmarshal(m, b)
}
func (m *FirewallRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirewallRule.Marshal(b, m, deterministic)
}
func (m *FirewallRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirewallRule.Merge(m, src)
}
func (m *FirewallRule) XXX_Size() int {
	return xxx_messageInfo_FirewallRule.Size(m)
}
func (m *FirewallRule) XXX_DiscardUnknown() {
	xxx_messageInfo_FirewallRule.DiscardUnknown(m)
}

var xxx_messageInfo_FirewallRule proto.InternalMessageInfo

func (m *FirewallRule) GetPeerIP() string {
	if m != nil {
		return m.PeerIP
	}
	return ""
}

func (m *FirewallRule) GetDirection() FirewallRuleDirection {
	if m != nil {
		return m.Direction
	}
	return FirewallRule_IN
}

func (m *FirewallRule) GetAction() FirewallRuleAction {
	if m != nil {
		return m.Action
	}
	return FirewallRule_ACCEPT
}

func (m *FirewallRule) GetProtocol() FirewallRuleProtocol {
	if m != nil {
		return m.Protocol
	}
	return FirewallRule_UNKNOWN
}

func (m *FirewallRule) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type KeepAlive struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeepAlive) Reset()         { *m = KeepAlive{} }
func (m *KeepAlive) String() string { return proto.CompactTextString(m) }
func (*KeepAlive) ProtoMessage()    {}
func (*KeepAlive) Descriptor() ([]byte, []int) {
	return fileDescriptor_edc174f991dc0a25, []int{26}
}

func (m *KeepAlive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeepAlive.Unmarshal(m, b)
}
func (m *KeepAlive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeepAlive.Marshal(b, m, deterministic)
}
func (m *KeepAlive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeepAlive.Merge(m, src)
}
func (m *KeepAlive) XXX_Size() int {
	return xxx_messageInfo_KeepAlive.Size(m)
}
func (m *KeepAlive) XXX_DiscardUnknown() {
	xxx_messageInfo_KeepAlive.DiscardUnknown(m)
}

var xxx_messageInfo_KeepAlive proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("management.HostConfig_Protocol", HostConfig_Protocol_name, HostConfig_Protocol_value)
	proto.RegisterEnum("management.DeviceAuthorizationFlowProvider", DeviceAuthorizationFlowProvider_name, DeviceAuthorizationFlowProvider_value)
	proto.RegisterEnum("management.FirewallRuleDirection", FirewallRuleDirection_name, FirewallRuleDirection_value)
	proto.RegisterEnum("management.FirewallRuleAction", FirewallRuleAction_name, FirewallRuleAction_value)
	proto.RegisterEnum("management.FirewallRuleProtocol", FirewallRuleProtocol_name, FirewallRuleProtocol_value)
	proto.RegisterType((*EncryptedMessage)(nil), "management.EncryptedMessage")
	proto.RegisterType((*SyncRequest)(nil), "management.SyncRequest")
	proto.RegisterType((*SyncResponse)(nil), "management.SyncResponse")
	proto.RegisterType((*LoginRequest)(nil), "management.LoginRequest")
	proto.RegisterType((*PeerKeys)(nil), "management.PeerKeys")
	proto.RegisterType((*PeerSystemMeta)(nil), "management.PeerSystemMeta")
	proto.RegisterType((*LoginResponse)(nil), "management.LoginResponse")
	proto.RegisterType((*ServerKeyResponse)(nil), "management.ServerKeyResponse")
	proto.RegisterType((*Empty)(nil), "management.Empty")
	proto.RegisterType((*WiretrusteeConfig)(nil), "management.WiretrusteeConfig")
	proto.RegisterType((*HostConfig)(nil), "management.HostConfig")
	proto.RegisterType((*ProtectedHostConfig)(nil), "management.ProtectedHostConfig")
	proto.RegisterType((*PeerConfig)(nil), "management.PeerConfig")
	proto.RegisterType((*NetworkMap)(nil), "management.NetworkMap")
	proto.RegisterType((*RemotePeerConfig)(nil), "management.RemotePeerConfig")
	proto.RegisterType((*SSHConfig)(nil), "management.SSHConfig")
	proto.RegisterType((*DeviceAuthorizationFlowRequest)(nil), "management.DeviceAuthorizationFlowRequest")
	proto.RegisterType((*DeviceAuthorizationFlow)(nil), "management.DeviceAuthorizationFlow")
	proto.RegisterType((*ProviderConfig)(nil), "management.ProviderConfig")
	proto.RegisterType((*Route)(nil), "management.Route")
	proto.RegisterType((*DNSConfig)(nil), "management.DNSConfig")
	proto.RegisterType((*CustomZone)(nil), "management.CustomZone")
	proto.RegisterType((*SimpleRecord)(nil), "management.SimpleRecord")
	proto.RegisterType((*NameServerGroup)(nil), "management.NameServerGroup")
	proto.RegisterType((*NameServer)(nil), "management.NameServer")
	proto.RegisterType((*FirewallRule)(nil), "management.FirewallRule")
	proto.RegisterType((*KeepAlive)(nil), "management.KeepAlive")
}

func init() {
	proto.RegisterFile("management.proto", fileDescriptor_edc174f991dc0a25)
}

var fileDescriptor_edc174f991dc0a25 = []byte{
	// 1682 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0x4f, 0x6f, 0x23, 0x49,
	0x15, 0x4f, 0xdb, 0xb1, 0x63, 0x3f, 0x7b, 0x82, 0x53, 0x0c, 0x83, 0x15, 0x86, 0xd9, 0x50, 0xe2,
	0x10, 0xa4, 0x55, 0x76, 0x95, 0x15, 0xb0, 0xd2, 0xc2, 0x6a, 0x33, 0x71, 0x66, 0x12, 0x25, 0x71,
	0xac, 0x6a, 0x0f, 0x8b, 0x46, 0x5c, 0x7a, 0xdc, 0x2f, 0x4e, 0x33, 0xed, 0xae, 0x9e, 0xaa, 0xea,
	0x04, 0x23, 0x21, 0xc4, 0x37, 0xe0, 0x80, 0x04, 0x1f, 0x81, 0x0f, 0x00, 0x27, 0x0e, 0x7c, 0x17,
	0x0e, 0x9c, 0xb9, 0x71, 0x45, 0x55, 0x5d, 0xd5, 0x7f, 0x1c, 0x67, 0x84, 0xb4, 0x1c, 0xd8, 0x53,
	0xea, 0xbd, 0xf7, 0x7b, 0xaf, 0xdf, 0xbf, 0x7a, 0xf5, 0x1c, 0x18, 0x2c, 0x82, 0x24, 0x98, 0xe3,
	0x02, 0x13, 0x75, 0x90, 0x0a, 0xae, 0x38, 0x81, 0x92, 0xb3, 0xfb, 0xc1, 0x9c, 0xf3, 0x79, 0x8c,
	0x1f, 0x19, 0xc9, 0x9b, 0xec, 0xfa, 0x23, 0x15, 0x2d, 0x50, 0xaa, 0x60, 0x91, 0xe6, 0x60, 0xfa,
	0x0b, 0x18, 0x9c, 0x24, 0x33, 0xb1, 0x4c, 0x15, 0x86, 0x97, 0x28, 0x65, 0x30, 0x47, 0xb2, 0x0b,
	0x9d, 0xbb, 0xf9, 0x24, 0x7b, 0x73, 0x8e, 0xcb, 0xa1, 0xb7, 0xe7, 0xed, 0x77, 0x59, 0x41, 0x13,
	0x02, 0x9b, 0x6f, 0x78, 0xb8, 0x1c, 0x36, 0xf6, 0xbc, 0xfd, 0x3e, 0x33, 0x67, 0x32, 0x84, 0xad,
	0x5b, 0x14, 0x32, 0xe2, 0xc9, 0xb0, 0xb9, 0xe7, 0xed, 0xb7, 0x98, 0x23, 0xe9, 0x23, 0xe8, 0xf9,
	0xcb, 0x64, 0xc6, 0xf0, 0x5d, 0x86, 0x52, 0xd1, 0xbf, 0x35, 0xa0, 0x9f, 0xd3, 0x32, 0xe5, 0x89,
	0x44, 0x72, 0x0e, 0x3b, 0x77, 0x91, 0x40, 0x25, 0x32, 0xa9, 0x10, 0x8f, 0x79, 0x72, 0x1d, 0xcd,
	0xcd, 0x27, 0x7b, 0x87, 0xdf, 0x3d, 0xa8, 0x04, 0xf6, 0xe5, 0x2a, 0x88, 0xdd, 0xd7, 0x23, 0x3f,
	0x02, 0x48, 0x11, 0x85, 0xb5, 0xd2, 0x30, 0x56, 0x9e, 0x54, 0xad, 0x4c, 0x0a, 0x29, 0xab, 0x20,
	0xc9, 0xe7, 0xd0, 0x13, 0xb8, 0xe0, 0x0a, 0xb5, 0x5c, 0x0e, 0x9b, 0x7b, 0xcd, 0xfd, 0xde, 0xe1,
	0xd3, 0xaa, 0x22, 0x2b, 0xc4, 0x56, 0xbd, 0xaa, 0x40, 0x0e, 0x80, 0x54, 0xc8, 0x33, 0x79, 0xb2,
	0x48, 0xd5, 0x72, 0xb8, 0xb9, 0xe7, 0xed, 0x77, 0xd8, 0x1a, 0x89, 0xf6, 0x73, 0x8c, 0xea, 0x8e,
	0x8b, 0xb7, 0x97, 0x41, 0x3a, 0x6c, 0xdd, 0xf7, 0xb3, 0x94, 0xb2, 0x0a, 0x92, 0xfe, 0xd9, 0x83,
	0xfe, 0x05, 0x9f, 0x47, 0x89, 0x4d, 0xa7, 0xae, 0x93, 0x44, 0x95, 0xa5, 0x95, 0x3a, 0x39, 0x9a,
	0x1c, 0xc0, 0xe6, 0x02, 0x55, 0x60, 0xd3, 0xb0, 0xbb, 0x9a, 0x06, 0x7f, 0x29, 0x15, 0x2e, 0x2e,
	0x51, 0x05, 0xcc, 0xe0, 0xb4, 0xad, 0x5f, 0xde, 0xa9, 0x29, 0x7f, 0x8b, 0x79, 0x11, 0xbb, 0xac,
	0xa0, 0xc9, 0xc7, 0xd0, 0xd1, 0xe9, 0x3a, 0xc7, 0xa5, 0x34, 0x61, 0xf5, 0x0e, 0x1f, 0xaf, 0xda,
	0xd3, 0x32, 0x56, 0xa0, 0xe8, 0x08, 0x3a, 0x8e, 0x4b, 0x9e, 0x42, 0x57, 0xca, 0x9b, 0x4a, 0x3b,
	0xf5, 0x59, 0xc9, 0xa8, 0xf5, 0x5a, 0xde, 0x53, 0x05, 0x4d, 0xff, 0xe9, 0xc1, 0x76, 0xdd, 0x59,
	0x0d, 0xbf, 0xe1, 0x52, 0x25, 0xc1, 0x02, 0x5d, 0xc8, 0x8e, 0xd6, 0xad, 0x39, 0xe7, 0x57, 0xbe,
	0x31, 0xd3, 0x65, 0xe6, 0x4c, 0x9e, 0x40, 0xfb, 0x2d, 0x8a, 0x04, 0x63, 0x1b, 0x94, 0xa5, 0x34,
	0x76, 0xc6, 0x05, 0x9a, 0x70, 0xba, 0xcc, 0x9c, 0xb5, 0xed, 0x34, 0x0e, 0xd4, 0x35, 0x17, 0x0b,
	0x53, 0x95, 0x2e, 0x2b, 0x68, 0xb2, 0x0d, 0x8d, 0x2b, 0x7f, 0xd8, 0x36, 0xdc, 0xc6, 0x95, 0xaf,
	0x6b, 0x5e, 0x69, 0xc0, 0x9f, 0xd9, 0xee, 0xdf, 0x32, 0xf2, 0x35, 0x12, 0x9d, 0x84, 0x2c, 0x72,
	0xb0, 0x8e, 0x81, 0x95, 0x0c, 0xfa, 0x07, 0x0f, 0x1e, 0xd9, 0xca, 0xfe, 0x1f, 0x5d, 0x0c, 0xba,
	0x84, 0x1d, 0x1f, 0xc5, 0xad, 0xa9, 0x63, 0xe1, 0xd9, 0x00, 0x9a, 0x6f, 0x8b, 0x7e, 0xd3, 0x47,
	0xf2, 0x29, 0x74, 0xf1, 0x57, 0x69, 0x24, 0x50, 0x1e, 0xa9, 0xa2, 0xdf, 0xf2, 0xb9, 0x73, 0xe0,
	0xe6, 0xce, 0xc1, 0xd4, 0xcd, 0x1d, 0x56, 0x82, 0xdf, 0x33, 0x38, 0xb6, 0xa0, 0x65, 0x2e, 0x8b,
	0x6e, 0xfa, 0x9d, 0x7b, 0x41, 0x92, 0x0f, 0xa1, 0x25, 0x55, 0x96, 0xc8, 0xa1, 0x67, 0x2e, 0x6b,
	0x2d, 0x98, 0x53, 0x2e, 0x95, 0x0d, 0x26, 0x07, 0x91, 0x1f, 0x42, 0x4b, 0x65, 0x22, 0x91, 0xc3,
	0x86, 0x41, 0x7f, 0x50, 0x0b, 0x5d, 0x70, 0x85, 0x33, 0x85, 0x61, 0x55, 0xcd, 0xa0, 0xc9, 0x01,
	0xb4, 0x65, 0x34, 0x4f, 0x82, 0xbc, 0x77, 0x1e, 0xfe, 0x8a, 0x45, 0xd1, 0x3f, 0x79, 0x00, 0x25,
	0x5b, 0x27, 0x2a, 0x13, 0x91, 0x4b, 0x54, 0x26, 0x22, 0xf2, 0x19, 0x74, 0x4c, 0x3e, 0x66, 0x3c,
	0x36, 0x79, 0xda, 0xae, 0xbb, 0x52, 0xea, 0x1a, 0xaf, 0x34, 0x8c, 0x15, 0x0a, 0xf4, 0x33, 0xe8,
	0x38, 0x2e, 0xd9, 0x82, 0xe6, 0xab, 0xd1, 0x64, 0xb0, 0xa1, 0x0f, 0xd3, 0xe3, 0xc9, 0xc0, 0x23,
	0x1d, 0xd8, 0x3c, 0x9d, 0x4e, 0x27, 0x83, 0x06, 0xe9, 0x42, 0x4b, 0x9f, 0xfc, 0x41, 0x53, 0x33,
	0x47, 0xd3, 0x0b, 0x7f, 0xb0, 0x49, 0x7f, 0x03, 0xdf, 0x5c, 0x13, 0xa8, 0x6e, 0x8c, 0x9b, 0x82,
	0xb2, 0xed, 0xf5, 0x50, 0x94, 0x15, 0xa4, 0xbe, 0x3d, 0x99, 0x44, 0xe1, 0x6e, 0x9a, 0x3e, 0x9b,
	0xdb, 0x13, 0x48, 0x79, 0xc7, 0x45, 0xe8, 0x06, 0x88, 0xa3, 0xe9, 0xef, 0x3c, 0x80, 0xb2, 0xc7,
	0x74, 0xd9, 0x83, 0x30, 0x14, 0x28, 0xa5, 0xcd, 0x8e, 0x23, 0x75, 0xce, 0x42, 0x53, 0x27, 0x93,
	0xb3, 0x30, 0x91, 0xe4, 0x13, 0x33, 0x3d, 0xac, 0x87, 0x79, 0x1d, 0xbe, 0x55, 0xf5, 0xd0, 0xf7,
	0x4f, 0xad, 0x83, 0x25, 0x4e, 0xfb, 0x77, 0xfd, 0x2e, 0x4c, 0xdc, 0xed, 0xd6, 0x67, 0xfa, 0x8f,
	0x66, 0x75, 0xec, 0xea, 0xc1, 0xe0, 0xa3, 0x88, 0x82, 0xd8, 0xb8, 0xb0, 0xc9, 0x2c, 0xf5, 0xb5,
	0x79, 0x44, 0x7e, 0x00, 0x6d, 0xc6, 0x33, 0x85, 0x72, 0xd8, 0x32, 0x9f, 0xda, 0xa9, 0x7d, 0x4a,
	0x4b, 0x98, 0x05, 0xe8, 0x14, 0x8e, 0xc6, 0xbe, 0x8d, 0xa8, 0x7d, 0x3f, 0x85, 0x85, 0x90, 0x95,
	0x38, 0xf2, 0x05, 0xf4, 0xf9, 0xf5, 0x75, 0x1c, 0x25, 0x36, 0xa0, 0xad, 0xff, 0x22, 0xa0, 0x9a,
	0x06, 0xf9, 0x1c, 0x1e, 0xbd, 0x88, 0x04, 0xde, 0x05, 0x71, 0xcc, 0xb2, 0x18, 0xe5, 0xb0, 0x63,
	0x4c, 0x0c, 0xab, 0x26, 0xaa, 0x00, 0x56, 0x87, 0x93, 0x43, 0x78, 0x7c, 0x5d, 0x65, 0xb8, 0x9c,
	0x74, 0x4d, 0x4e, 0xd6, 0xca, 0xe8, 0x1f, 0x3d, 0x18, 0xac, 0xba, 0xf5, 0xde, 0x75, 0xe6, 0x19,
	0x40, 0x10, 0xc7, 0xfc, 0x0e, 0xc3, 0xb3, 0x34, 0x9f, 0x0f, 0x5d, 0x56, 0xe1, 0xfc, 0xef, 0xda,
	0xef, 0x0c, 0xba, 0x05, 0x56, 0x7f, 0x55, 0xca, 0x9b, 0x93, 0x24, 0x78, 0x13, 0x63, 0x68, 0x7c,
	0xea, 0xb0, 0x0a, 0xa7, 0xfe, 0x64, 0x36, 0x56, 0x9e, 0x4c, 0xba, 0x07, 0xcf, 0x46, 0x78, 0x1b,
	0xcd, 0xf0, 0x28, 0x53, 0x37, 0x5c, 0x44, 0xbf, 0x0e, 0x54, 0xc4, 0x93, 0x17, 0x31, 0xbf, 0x73,
	0x7b, 0xd6, 0xdf, 0x3d, 0xf8, 0xf6, 0x03, 0x10, 0x72, 0x6a, 0xe6, 0xc8, 0x6d, 0x14, 0xa2, 0x30,
	0x5f, 0xde, 0x3e, 0xfc, 0xb0, 0xd6, 0x0c, 0xeb, 0xd5, 0xf4, 0x20, 0x37, 0x3a, 0xac, 0xd0, 0x26,
	0xcf, 0x61, 0xdb, 0x9d, 0x6b, 0xd7, 0x65, 0x77, 0x65, 0xbe, 0x56, 0x10, 0x6c, 0x45, 0x83, 0x3e,
	0x31, 0x23, 0x31, 0xb7, 0x07, 0xd0, 0x3e, 0xbd, 0xf2, 0xa7, 0x27, 0xa3, 0xc1, 0x06, 0xfd, 0x7d,
	0x63, 0xd5, 0xb8, 0x2e, 0xe3, 0x71, 0x1c, 0x61, 0xa2, 0xce, 0x46, 0xae, 0x8c, 0x8e, 0x26, 0x14,
	0xfa, 0xf9, 0xd9, 0xc7, 0x99, 0x40, 0x65, 0x07, 0x48, 0x8d, 0xa7, 0x6f, 0xfc, 0x88, 0x2f, 0x82,
	0xc8, 0xed, 0x37, 0x96, 0xd2, 0x76, 0x8f, 0xb2, 0x30, 0xc2, 0x64, 0xe6, 0xd6, 0x81, 0x82, 0xd6,
	0xb7, 0xb2, 0x4c, 0xc8, 0x49, 0x12, 0xa6, 0x3c, 0x4a, 0x94, 0x5d, 0x0e, 0xd6, 0x48, 0xc8, 0xf7,
	0xe1, 0x91, 0x59, 0x99, 0x0a, 0x68, 0xbe, 0x31, 0xd4, 0x99, 0xe4, 0x31, 0xb4, 0xfc, 0x19, 0x4f,
	0xd1, 0xee, 0x0b, 0x39, 0xa1, 0x9b, 0xe2, 0x95, 0xc4, 0xb3, 0x51, 0xbe, 0x83, 0x75, 0xf2, 0xa6,
	0x28, 0x39, 0xf4, 0xaf, 0x1e, 0xb4, 0xcc, 0x8d, 0xd6, 0xcb, 0x48, 0x91, 0x83, 0xc6, 0xd9, 0x48,
	0xcf, 0x53, 0x3b, 0xd9, 0x6c, 0xe0, 0x8e, 0x24, 0x7b, 0xd0, 0xb3, 0xc7, 0xe9, 0x32, 0x45, 0x13,
	0x78, 0x93, 0x55, 0x59, 0xba, 0x57, 0xf5, 0x55, 0x71, 0xbd, 0xaa, 0xcf, 0x3a, 0x53, 0x97, 0xa8,
	0x44, 0x34, 0x33, 0x91, 0x36, 0x99, 0xa5, 0xb4, 0x87, 0x97, 0x81, 0x7c, 0x97, 0xa1, 0x08, 0x42,
	0x34, 0xa1, 0x75, 0x58, 0x85, 0xa3, 0xe3, 0x1a, 0xa3, 0x2e, 0x8f, 0x8d, 0xcb, 0x10, 0xf4, 0x2f,
	0x5e, 0x65, 0xfe, 0xe8, 0x0c, 0xe9, 0x9d, 0x22, 0x9a, 0x61, 0xde, 0xec, 0xb6, 0xfb, 0xeb, 0x4c,
	0xf2, 0x12, 0x06, 0xe3, 0x60, 0x81, 0xf9, 0xf6, 0xf1, 0x52, 0xf0, 0x2c, 0x75, 0x8f, 0xf7, 0x77,
	0x6a, 0x8b, 0x72, 0x1d, 0xc3, 0xee, 0x29, 0x91, 0x4f, 0xa1, 0x77, 0x9c, 0x49, 0xc5, 0x17, 0xaf,
	0x79, 0x82, 0x6e, 0x2c, 0xd7, 0xe6, 0x79, 0x29, 0x66, 0x55, 0x28, 0xfd, 0x39, 0x40, 0x49, 0x56,
	0x9a, 0xc7, 0xab, 0x35, 0xcf, 0x21, 0x6c, 0x31, 0x9c, 0x71, 0x11, 0x3a, 0xff, 0x6a, 0xe3, 0xcd,
	0x8f, 0x16, 0x69, 0x8c, 0x39, 0x80, 0x39, 0x20, 0x55, 0xd0, 0xaf, 0x0a, 0x74, 0x09, 0xc6, 0xe5,
	0x3e, 0x6b, 0xce, 0x9a, 0x67, 0x2a, 0xd6, 0x30, 0x05, 0x30, 0x67, 0x9d, 0xde, 0xe3, 0x38, 0x90,
	0xd2, 0xf6, 0x6f, 0x4e, 0xe8, 0x27, 0x73, 0x3a, 0xbd, 0x30, 0xf5, 0x6b, 0x32, 0x7d, 0xd4, 0x38,
	0x36, 0x0a, 0x54, 0x60, 0xfb, 0x34, 0x27, 0xe8, 0x6f, 0xe1, 0x1b, 0x2b, 0xd9, 0xd1, 0xc9, 0x29,
	0x59, 0x6b, 0x77, 0xa9, 0x52, 0xcc, 0xaa, 0x50, 0xdd, 0x71, 0x13, 0x11, 0x2d, 0x02, 0x91, 0x8f,
	0xa7, 0x0e, 0x73, 0xa4, 0x96, 0xe4, 0xa9, 0xc9, 0x93, 0xdd, 0x65, 0x8e, 0xa4, 0xa7, 0x00, 0xa5,
	0x09, 0xd3, 0xc3, 0x93, 0xa2, 0x87, 0x27, 0x3a, 0xc1, 0x63, 0xbf, 0x12, 0xb2, 0xa5, 0x4c, 0x7f,
	0x72, 0xa1, 0x6c, 0xeb, 0x9a, 0x33, 0xfd, 0x57, 0x03, 0xfa, 0xd5, 0xb7, 0x42, 0x2b, 0xeb, 0xc6,
	0x2d, 0x0c, 0x5a, 0x8a, 0x7c, 0x01, 0xdd, 0x51, 0x24, 0x70, 0xa6, 0xa7, 0x98, 0xdd, 0xb8, 0xe8,
	0x43, 0xcf, 0xcf, 0x41, 0xe8, 0x90, 0xac, 0x54, 0x22, 0x3f, 0x86, 0xf6, 0x51, 0xae, 0xde, 0xbc,
	0xbf, 0xb0, 0xd5, 0xd4, 0x83, 0x5c, 0xd7, 0xc2, 0xc9, 0x4f, 0xcb, 0x75, 0xcd, 0xd4, 0x66, 0xfb,
	0xf0, 0x7b, 0x0f, 0xaa, 0xa6, 0xc5, 0xb6, 0x57, 0x6c, 0x78, 0x2e, 0xec, 0x96, 0xbd, 0x96, 0x3a,
	0xec, 0xa7, 0xd0, 0x2d, 0x7c, 0x24, 0x6d, 0x68, 0x9c, 0x8d, 0xf3, 0x0d, 0xf0, 0xea, 0xd5, 0x74,
	0xe0, 0xd1, 0x67, 0xd0, 0xce, 0x5d, 0xd0, 0x73, 0xf4, 0xe8, 0xf8, 0xf8, 0x64, 0x32, 0x1d, 0x6c,
	0x98, 0x15, 0x90, 0x5d, 0x4d, 0x06, 0x1e, 0xfd, 0x49, 0xb9, 0x7c, 0x92, 0x1e, 0x6c, 0xbd, 0x1a,
	0x9f, 0x8f, 0xaf, 0xbe, 0xb4, 0x16, 0x8e, 0x2e, 0x2e, 0x06, 0x9e, 0x5b, 0x26, 0x1b, 0x6e, 0xbd,
	0x34, 0x0b, 0xe4, 0xd9, 0xf1, 0xe5, 0x64, 0xb0, 0x49, 0x7b, 0xd0, 0x3d, 0x47, 0x4c, 0x8f, 0xe2,
	0xe8, 0x16, 0x0f, 0xff, 0xdd, 0x80, 0x9d, 0xcb, 0x22, 0x16, 0x7b, 0x73, 0xc9, 0x09, 0xb4, 0xcc,
	0x6f, 0x18, 0x52, 0x5b, 0x12, 0x56, 0xff, 0xb9, 0xb0, 0xfb, 0x5e, 0x29, 0xdd, 0x20, 0x2f, 0x60,
	0xd3, 0x5f, 0x26, 0xb3, 0xaf, 0x66, 0xe5, 0x63, 0x8f, 0x3c, 0x87, 0xfe, 0x4b, 0x54, 0xc5, 0xef,
	0x17, 0x52, 0x5b, 0x90, 0xcc, 0xb6, 0xb0, 0x5b, 0xfb, 0x25, 0x75, 0xef, 0x97, 0x0e, 0xdd, 0xd0,
	0xaf, 0x7f, 0x24, 0x4f, 0x31, 0x88, 0xd5, 0xcd, 0x5a, 0x03, 0xf7, 0x59, 0x74, 0x83, 0xbc, 0x86,
	0xdd, 0x97, 0xa8, 0x1e, 0x7a, 0x7e, 0xbf, 0x52, 0x58, 0xcf, 0x3b, 0xaf, 0xdb, 0xf6, 0x5f, 0x39,
	0x6d, 0xf3, 0xe7, 0x93, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x23, 0x97, 0x6b, 0xff, 0x11,
	0x00, 0x00,
}
